plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id "com.microsoft.azure.azurewebapp" version "1.7.1"
}

group = 'net.daisyquest'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-quartz'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'com.microsoft.azure:applicationinsights-spring-boot-starter:2.6.4'
    implementation 'com.microsoft.azure:applicationinsights-logging-logback:2.6.4'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.14.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
}

tasks.named('test') {
    useJUnitPlatform()
    jvmArgs '-Dmockito.mock.maker=mock-maker-inline'
}

def getCurrentBranch() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext.currentBranch = getCurrentBranch()
//test
azurewebapp {
    subscription = '6dfef9cc-945f-4c9e-8007-064c19d7566a'
    resourceGroup = determineResourceGroup()
    appName = determineAppName()
    pricingTier = 'B1'
    region = 'eastus'
    runtime {
        os = 'Linux'
        webContainer = 'Java SE'
        javaVersion = 'Java 17'
    }
    appSettings {
        // <key> = <value>
    }
    auth {
        type = 'azure_cli'
    }
}

def determineResourceGroup() {
    switch (currentBranch) {
        case 'master':
            return 'DaisyQuest'
        case 'staging':
            return 'DaisyQuest-Staging'
        default:
            return 'DaisyQuest-Dev'
    }
}

def determineAppName() {
    switch (currentBranch) {
        case 'master':
            return 'DaisyQuest'
        case 'staging':
            return 'DaisyQuest-Staging'
        default:
            return "DaisyQuest-Dev"
    }
}
